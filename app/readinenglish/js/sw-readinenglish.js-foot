 ];
 
// configura página inicial ao recarregar a página em modo offline_rie
  self.addEventListener('install', event => {
    event.waitUntil(
      fetch(createCacheBustedRequest(OFFLINE_URL_rie)).then(function(response) {
        return caches.open(CURRENT_CACHES_rie.offline_rie).then(function(cache) {
          return cache.put(OFFLINE_URL_rie, response);
        });
      })
    );

    // instala todos arquivos do site indicados em OFLINE_URLs
  self.addEventListener('install', function(event) {
    // Perform install steps
    event.waitUntil(
      caches.open(CURRENT_CACHES_rie.offline_rie)
        .then(function(cache) {
          console.log('Opened cache');
          return cache.addAll(urls_rie);
        })
    );
  });


function createCacheBustedRequest(url) {
  let request_rie = new Request(url, {cache: 'reload'});
  if ('cache' in request_rie) {
    return request_rie;
  }
  let bustedUrl_rie = new URL(url, self.location.href);
  bustedUrl_rie.search += (bustedUrl_rie.search ? '&' : '') + 'cachebust=' + Date.now();
  return new Request(bustedUrl_rie);
}
});

self.addEventListener('activate', event => {
  let expectedCacheNames_rie = Object.keys(CURRENT_CACHES_rie).map(function(key) {
    return CURRENT_CACHES_rie[key];
  });
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (expectedCacheNames_rie.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

self.addEventListener('fetch', event => {
  if (event.request.mode === 'navigate' ||
      (event.request.method === 'GET' &&
       event.request.headers.get('accept').includes('text/html'))) {
    event.respondWith(
      fetch(event.request).catch(error => {
        return caches.match(OFFLINE_URL_rie);
      })
    );
  }
}); 